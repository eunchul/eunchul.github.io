<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Centos | Life with Linux]]></title>
  <link href="http://blog.foobargem.com/blog/categories/centos/atom.xml" rel="self"/>
  <link href="http://blog.foobargem.com/"/>
  <updated>2016-06-11T17:31:15+09:00</updated>
  <id>http://blog.foobargem.com/</id>
  <author>
    <name><![CDATA[foobargem]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build a Kernel Module on CentOS]]></title>
    <link href="http://blog.foobargem.com/blog/2016/06/11/build-a-kernel-module-on-centos/"/>
    <updated>2016-06-11T16:56:53+09:00</updated>
    <id>http://blog.foobargem.com/blog/2016/06/11/build-a-kernel-module-on-centos</id>
    <content type="html"><![CDATA[<h3>발단</h3>

<p>bcache (Linux kernel block layer cache) 를 적용하려고 알아보니 CentOS 7 의 커널은 bcache module 이 disabled 였다.
그래서 kernel source 를 받아서 bcache module 을 build 시도했다.</p>

<p>경험하면 할 수록 CentOS 는 서버환경에서 별로이다. &ndash; Debian 추천!! :)</p>

<h3>Build 환경 구축</h3>

<h5>required packages 설치</h5>

<pre><code># yum install rpm-build redhat-rpm-config asciidoc hmaccalc perl-ExtUtils-Embed pesign xmlto \
              audit-libs-devel binutils-devel elfutils-devel elfutils-libelf-devel \
              ncurses-devel newt-devel numactl-devel pciutils-devel python-devel zlib-devel
</code></pre>

<h5>kernel source 다운로드</h5>

<p><a href="http://vault.centos.org/7.N.YYMM/updates/Source/SPackages/">http://vault.centos.org/7.N.YYMM/updates/Source/SPackages/</a> 에서 kernel-$(uname -r).src.rpm 파일을 다운로드 및 설치한다.
설치가 되면 rpmbuild 디렉토리 이하에 관련 files 이 복사되어 있다.</p>

<pre><code># rpm -i http://vault.centos.org/7.2.1511/updates/Source/SPackages/kernel-3.10.0-327.18.2.el7.src.rpm 2&gt;&amp;1 | grep -v exist
# cd ~rpmbuild/SPECS
# rpmbuild -bp --target=$(uname -m) kernel.spec
# cd ~rpmbuild/BUILD
</code></pre>

<h5>module build</h5>

<p><strong>edit .config</strong></p>

<pre><code># cd ~rpmbuild/BUILD/kernel-3.10.0-327.13.1.el7/linux-3.10.0-327.13.1.el7.x86_64
# vim .config
</code></pre>

<p><strong>.config</strong></p>

<pre><code>...
CONFIG_BCACHE=m
...
</code></pre>

<p><strong>build</strong></p>

<pre><code># make modules_install SUBDIRS=drivers/md/bcache
// modules_install: bcache.ko 복사,depmod -a 수행

# modinfo bcache
filename:       /lib/modules/3.10.0-327.13.1.el7.x86_64/kernel/drivers/md/bcache/bcache.ko
author:         Kent Overstreet &lt;kent.overstreet@gmail.com&gt;
license:        GPL
license:        GPL
author:         Kent Overstreet &lt;koverstreet@google.com&gt;
rhelversion:    7.2
srcversion:     744AC1548F61C54B1445EF6
depends:
vermagic:       3.10.0 SMP mod_unload modversions
</code></pre>

<h5>모듈 적재</h5>

<pre><code># modprobe bcache
insmod: error inserting 'bcache.ko': -1 Invalid module format

# dmesg
...
bcache: no symbol version for module_layout
</code></pre>

<p>모듈 build 할때 signing 이 안되어서 발생하는 문제.  (signing 하는 방법은 추후에 업데이트 할것!!)</p>

<p>일단은 &mdash;force 으로 해결!!</p>

<pre><code># modprobe -f bcache
# lsmod | grep bcache
bcache                209287  0
</code></pre>

<h3>적용후</h3>

<p>동일한 조건에서 dm-cache 와 bcache 를 fio 로 시험을 해보았다.
결과는 dm-cache 가 random read, sequential read 가 월등히 빨랐다.</p>

<p>CentOS 에서 bcache 모듈을 제외한게 dm-cache 가 좋다고 판단해서 일까&hellip;</p>

<h3>참고</h3>

<ul>
<li><a href="https://wiki.centos.org/HowTos/Custom_Kernel">https://wiki.centos.org/HowTos/Custom_Kernel</a></li>
<li><a href="https://wiki.centos.org/HowTos/I_need_the_Kernel_Source">https://wiki.centos.org/HowTos/I_need_the_Kernel_Source</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/module-signing.txt">https://www.kernel.org/doc/Documentation/module-signing.txt</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RPM Packaging]]></title>
    <link href="http://blog.foobargem.com/blog/2016/06/11/rpm-packaging/"/>
    <updated>2016-06-11T11:36:38+09:00</updated>
    <id>http://blog.foobargem.com/blog/2016/06/11/rpm-packaging</id>
    <content type="html"><![CDATA[<h3>발단</h3>

<p>VMware VM 중 1대의 Disk 공간이 부족해서 resize 를 하려고 했는데 parted-3.1 (CentOS 7) 에는 resize command 가 없어졌다.
구글링을 해보니 parted-3.2 에 resizepart 가 추가되었다고 한다.</p>

<ul>
<li><a href="http://savannah.gnu.org/forum/forum.php?forum_id=8042">http://savannah.gnu.org/forum/forum.php?forum_id=8042</a></li>
</ul>


<p>그래서 소스코드를 직접 빌드하고서 내친김에 rpm packaging 까지 하게 되었다.</p>

<h3>rpm 패키징</h3>

<h5>Build directory 생성</h5>

<pre><code>$ mkdir rpmbuild
$ cd rpmbuild
$ mkdir SOURCES SPECS BUILD BUILDROOT RPMS SRPMS
$ ls
BUILD  BUILDROOT  RPMS  SOURCES  SPECS  SRPMS
</code></pre>

<table>
  <thead>
    <tr>
      <th>Directory</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>SOURCES</td>
      <td>original sources, patches, icon files 가 포함된 디렉토리</td>
    </tr>
    <tr>
      <td>SPECS</td>
      <td>rpm build 를 위한 spec files 가 있는 디렉토리</td>
    </tr>
    <tr>
      <td>BUILD</td>
      <td>source file 압축해제 및 build 되는 디렉토리</td>
    </tr>
    <tr>
      <td>BUILDROOT</td>
      <td>%install stage 에서 생성되는 files 가 저장되는 디렉토리</td>
    </tr>
    <tr>
      <td>RPMS</td>
      <td>binary package files (*.rpm) 이 만들어지는 디렉토리</td>
    </tr>
    <tr>
      <td>SRPMS</td>
      <td>source package files (*.src.rpm) 이 만들어지는 디렉토리</td>
    </tr>
  </tbody>
</table>


<h5>Spec file 작성</h5>

<pre><code>$ cd SPECS
$ vim parted-3.2.spec
</code></pre>

<p><strong>parted-3.2.spec</strong></p>

<p>gist: <a href="https://gist.github.com/foobargem/f260b896fe030a382b7b18f43633a8a4#file-parted-3-2-spec">https://gist.github.com/foobargem/f260b896fe030a382b7b18f43633a8a4#file-parted-3-2-spec</a></p>

<pre><code>%global _enable_debug_package 0
%global debug_package %{nil}
%define dist .el7.nhnent
%define _prefix /opt/parted

Name: parted
Version: 3.2
Release: 1%{?dist}
Summary: The GNU disk partition manipulation program

License: GPLv3+
URL: http://www.gnu.org/software/parted
Source0: parted-3.2.tar.xz

%description
The GNU Parted program allows you to create, destroy, resize, move,
and copy hard disk partitions. Parted can be used for creating space
for new operating systems, reorganizing disk usage, and copying data
to new hard disks.

%prep
%setup -q

%build
%configure
make %{?_smp_mflags}

%install
%make_install

%clean
rm -rf $RPM_BUILD_ROOT

%files
%{_prefix}
#%{_datadir}/*
#%{_includedir}/*
#%{_libdir}/*
#%{_sbindir}/*

%changelog
* Fri Jun 10 2016 makerpm
- build and packaging
</code></pre>

<h5>Build</h5>

<pre><code>$ cd SPECS
$ rpmbuild -bb parted-3.2.spec
</code></pre>

<p>오류 없으면 rpmbuilds/RPMS/x86_64/parted-3.2-1.el7.nhnent.x86_64.rpm 파일이 생성된다.</p>

<h3>설명</h3>

<pre><code>%global _enable_debug_package 0
%global debug_package %{nil}
</code></pre>

<p>debug package 를 생성하지 않음</p>

<pre><code>%define dist .el7.nhnent
%define _prefix /opt/parted
</code></pre>

<p>main stream package 와 구분하기 위해서 release name 에 nhnent 라는 접미사를 붙였고
package files 의 prefix 를 /opt/parted 로 지정했다.</p>

<h3>에피소드</h3>

<ul>
<li>prefix 와 %files</li>
</ul>


<p>prefix 를 /opt/parted 로 하고 %files 에 각 파일을 기술해줬더니
패키지 삭제시 empty directory 가 남아있는 이슈가 있었다.
그래서 %files 를 %{_prefix} 롤 지정했다.</p>

<p>만약 /usr 디렉토리에 sbin, share, lib 등으로 나누어 설치하게 하려면
%files 에 아래와 같이 기술해줘야 한다.</p>

<pre><code>%files
%{_datadir}/*
%{_includedir}/*
%{_libdir}/*
%{_sbindir}/*
</code></pre>

<h3>참고</h3>

<ul>
<li><a href="http://www.tldp.org/HOWTO/RPM-HOWTO/build.html">http://www.tldp.org/HOWTO/RPM-HOWTO/build.html</a></li>
<li><a href="https://fedoraproject.org/wiki/How_to_create_an_RPM_package">https://fedoraproject.org/wiki/How_to_create_an_RPM_package</a></li>
<li><a href="https://fedoraproject.org/wiki/Packaging:DistTag">https://fedoraproject.org/wiki/Packaging:DistTag</a></li>
<li><a href="https://fedoraproject.org/wiki/How_to_create_a_GNU_Hello_RPM_package">https://fedoraproject.org/wiki/How_to_create_a_GNU_Hello_RPM_package</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
