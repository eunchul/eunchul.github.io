<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Life with Linux]]></title>
  <link href="http://blog.foobargem.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.foobargem.com/"/>
  <updated>2016-03-27T22:51:33+09:00</updated>
  <id>http://blog.foobargem.com/</id>
  <author>
    <name><![CDATA[foobargem]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LG 그램 랩탑에서 Linux Kernel 빌드하기]]></title>
    <link href="http://blog.foobargem.com/blog/2015/07/04/build-kernel-on-lg-gram-laptop/"/>
    <updated>2015-07-04T11:06:36+09:00</updated>
    <id>http://blog.foobargem.com/blog/2015/07/04/build-kernel-on-lg-gram-laptop</id>
    <content type="html"><![CDATA[<p>회사에서 지급받은 랩탑은 LG 그램이다.
OS는 LMDE(Linux Mint Debian Edition) 을 설치해서 잘 쓰고 있다.</p>

<p>처음에는 i915 driver 버그로 LED 밝기조절이 안되고
밝기조절 기능을 활성화 하는경우 시스템이 멎는 문제가 있었다.
삽질을 하던중 KLDP 에서 커널 업데이트하면 해결된다는 글(<a href="https://kldp.org/node/151205">https://kldp.org/node/151205</a>)을 읽었다.
그리고 바로 3.18.8 커널로 빌드를 했고 문제는 깔끔하게 해결되었다. :D</p>

<p>커널 업데이트 후 wireless device (Intel Wireless 7620) 가 인식이 안되었는데
원인은 firmware 버전이 안맞아서였다.
그래서 <a href="https://wireless.wiki.kernel.org/en/users/Drivers/iwlwifi">linux wireless driver website</a> 에서
커널버전에 맞는 firmware 를 다운로드 받아 설치를 했고 아주 잘 동작함을 확인했다.</p>

<p>이번주에 오랜만에 커널을 4.1.1 버전으로 업데이트하고 wireless device 가 동작을 안해서
이전의 firmware 설치한 기억을 잊어버리고 dmesg, log 를 추적해서 firmware 버전이 안맞는것이
원인이라는 것을 찾아서 다시 4.1 버전 이상에 맞는 firmware 를 설치했다.</p>

<p>나의 믿을수 없는 기억으로 또 삽질하는 것을 방지하고자 커널 빌드과정을 정리한다.</p>

<h3>prepare</h3>

<h5>Kernel source</h5>

<pre><code>https://www.kernel.org/
</code></pre>

<h5>Wireless device firmware</h5>

<p>설치하려는 커널 버전에 맞는 firmware 다운로드</p>

<pre><code># tar xvzf iwlwifi-7260-ucode-25.30.13.0.tgz
# cp iwlwifi-7260-13.ucode /lib/firmware
</code></pre>

<h3>kernel build</h3>

<h5>Configuration</h5>

<p>설정 하나하나를 살펴보고 활성/모듈/비활성을 선택해야 한다.
그러나 지금버전 커널의 config 파일를 기반으로 설정을 하면 좀 수월하다.
그래서 /boot/config-$(uname -r) 파일을 복사해온다.</p>

<pre><code># cd /usr/src
# tar xvf linux-4.1.1.tar.xz
...
# cd linux-4.1.1
# cp /boot/config-$(uname -r) /usr/src/linux-4.1.1/.config
# make menuconfig
// Load -&gt; .config 후 전체 설정을 확인
</code></pre>

<h5>Build</h5>

<p>빌드 수행시 -jN (N은 cpu core 개수의 1/2정도) 옵션으로 병렬로 할수 있다.
make install 이 수행되면 자동으로 update-grub 가 수행된다.</p>

<pre><code># make -j2
# make modules_install install
</code></pre>

<h5>Done</h5>

<pre><code># reboot
</code></pre>

<h3>참고</h3>

<ul>
<li><a href="https://www.kernel.org/">https://www.kernel.org/</a></li>
<li><a href="http://kernelnewbies.org/KernelBuild">http://kernelnewbies.org/KernelBuild</a></li>
<li><a href="https://wireless.wiki.kernel.org/en/users/Drivers/iwlwifi">https://wireless.wiki.kernel.org/en/users/Drivers/iwlwifi</a></li>
<li><a href="https://kldp.org/node/151205">https://kldp.org/node/151205</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multipath]]></title>
    <link href="http://blog.foobargem.com/blog/2014/08/27/multipath/"/>
    <updated>2014-08-27T11:11:11+09:00</updated>
    <id>http://blog.foobargem.com/blog/2014/08/27/multipath</id>
    <content type="html"><![CDATA[<p>컴퓨터 스토리지에서 multipath I/O 는 결함감내시스템(Fault tolerance) 과 성능(Performance) 향상을 위한 기술을 말한다.</p>

<p>버스(buses), 컨트롤러(controllers), 스위치(switches), 브리지 장치(bridge devices) 로 구성된 대량의 스토리지 장치(mass storage devices)와 컴퓨터 시스템의 CPU 사이에 한개 이상의 경로(path)를 두어서 구성을 한다.</p>

<p>예를 들면 하나의 SCSI 디스크가 연결된 두개의 SCSI 컨트롤러(controllers) 가 같은 컴퓨터에 장착되어 있거나 두개의 파이버 채널(Fiber Channel) 포트(port)가 연결되어 있는 것을 말한다.
만약 한개의 컨트롤러나 포트 또는 스위치가 장애가 발생하면 운영체제(OS)는 장애가 나지 않은 다른 컨트롤러를 통해서 반드시 I/O 작업이 이뤄져야 한다.</p>

<p>Multipath software layers 는 아래와 같은 성능 향상을 위한 기능을 제공한다.</p>

<ul>
<li>Dynamic load balancing</li>
<li>Traffic shaping</li>
<li>Automatic path management</li>
<li>Dynamic reconfiguration</li>
</ul>


<h3>설정</h3>

<p>Debian wheezy 에서multipath-tools_0.4.9+git0.4dfdaf2b-7~deb7u2_amd64.deb 패키지를 설치하여 구성하였다.</p>

<h4>WWN or WWID</h4>

<p>WWN(World Wide Name) 또는 WWID(World Wide Identifier) 라고 불리운다.
이것은 FC(Fiber Channel), SAS(Serial Attached SCSI), ATA(Advanced Technology Attachment) 의 스토리지 기술에서 고유한 식별자(unique identifier)로 사용된다.</p>

<p>참고: <a href="http://en.wikipedia.org/wiki/World_Wide_Name">http://en.wikipedia.org/wiki/World_Wide_Name</a></p>

<h5>FC 주소 확인</h5>

<p>HBA 가 장착된 리눅스 시스템에서 /sys/class/fc_host 디렉토리 이하를 살펴보면 확인할 수 있다.</p>

<pre><code># ls /sys/class/fc_host
host0
# cat /sys/class/fc_host/host0/port_name
0x2100001b32939df8
# cat /sys/class/fc_host/host0/node_name
0x2000001b32939df8
</code></pre>

<h5>WWN 확인</h5>

<p>리눅스 시스템에서는 /sys/class/fc_transport 디렉토리 이하를 살펴보면 확인할 수 있다.</p>

<pre><code># ls /sys/class/fc_transport
target0:0:0  target0:0:1
# cat /sys/class/fc_transport/target0\:0\:0/node_name 
0x2000001b4d01a9f2
# cat /sys/class/fc_transport/target0\:0\:0/port_name 
0x2100001b4d01a9f2
</code></pre>

<h5>multipath.conf</h5>

<p>Debian wheezy 에 4개의 FC path 가 할당 되었다.</p>

<pre><code>defaults {
    user_friendly_names yes 
    fast_io_fail_tmo 15  
}

blacklist {
    devnode "^sd[a-z][[0-9]*]"
    wwid 36b82a720d8d964001b5dbbc31d351fe1
}

multipaths {
    multipath {
        wwid 3600601601c203900cff81153e321e411
    }   
    multipath {
        wwid 3600601601c203900d0f81153e321e411
    }   
    multipath {
        wwid 3600601601c203900ee1d1460e321e411
    }   
    multipath {
        wwid 3600601601c203900ef1d1460e321e411
    }   
}
</code></pre>

<h4>설정 예</h4>

<h5>defaults</h5>

<p><img src="/images/201408/multipath_default.png"></p>

<h5>path_grouping_policy: multibus</h5>

<p><img src="/images/201408/multipath_multibus.png"></p>

<h5>hwhandler=0</h5>

<p><img src="/images/201408/multipath_disable_hwhandler.png"></p>

<h5>features=0</h5>

<p><img src="/images/201408/multipath_disable_features.png"></p>

<h3>failover</h3>

<p>Debian wheezy 에서 multipath 를 구성한뒤 failover 시험을 했다.
2개의 HBA에 연결된 port 를 하나 뽑았을 때 I/O 작업이 지속되는지를 체크 했는데
300초 동안 I/O 작업이 멈춰있었다.
실제로는 OCFS2 로 구성되어 있었는데 OCFS2 의 self-fencing 으로인해 재부팅이 되었다.</p>

<p>이를 해결하기 위해서 Debian 시스템을 확인하던 중
dev_loss_tmo 의 기본값이 300초, fast_io_fail_tmo 의 기본값이 off 임을 발견하였다.</p>

<p>그래서 fast_io_fail_tmo 를 15초로 설정해주니 15초의 I/O 지연이 발생하지만 failover 가 정상적으로 수행됨을 확인했다.</p>

<h3>문제점</h3>

<p>multipath.conf 의 man page 에 따라 defaults 섹션에 기술한 설정값이 적용이 안됨을 발견했다.
features=0 을 설정하기 위해서는 multipath 섹션을 따로 기술해주고 no_path_retry fail 을 추가해주면 된다.</p>

<p>이는 좀더 확인이 필요하다.</p>

<h3>참고</h3>

<ul>
<li><a href="https://access.redhat.com/documentation/ko-KR/Red_Hat_Enterprise_Linux/6/html/DM_Multipath/">https://access.redhat.com/documentation/ko-KR/Red_Hat_Enterprise_Linux/6/html/DM_Multipath/</a></li>
<li><a href="http://www.sourceware.org/lvm2/wiki/MultipathUsageGuide">http://www.sourceware.org/lvm2/wiki/MultipathUsageGuide</a></li>
<li><a href="http://docs.oracle.com/cd/E19253-01/820-1931/">http://docs.oracle.com/cd/E19253-01/820-1931/</a></li>
<li><a href="http://www.brentozar.com/archive/2009/05/san-multipathing-part-1-what-are-paths/">http://www.brentozar.com/archive/2009/05/san-multipathing-part-1-what-are-paths/</a></li>
<li><a href="http://www.brentozar.com/archive/2009/05/san-multipathing-part-2-what-multipathing-does/">http://www.brentozar.com/archive/2009/05/san-multipathing-part-2-what-multipathing-does/</a></li>
<li><a href="https://www.sit.auckland.ac.nz/Configuring_SAN_access_with_Linux_multipath">https://www.sit.auckland.ac.nz/Configuring_SAN_access_with_Linux_multipath</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macbook Air 에 Debian(wheezy) 설치하기]]></title>
    <link href="http://blog.foobargem.com/blog/2013/12/14/installing-debian-on-macbook-air/"/>
    <updated>2013-12-14T23:09:46+09:00</updated>
    <id>http://blog.foobargem.com/blog/2013/12/14/installing-debian-on-macbook-air</id>
    <content type="html"><![CDATA[<h3>Macbook Air</h3>

<p>난 맥북 에어를 좋아한다.
가볍고, 13인치 화면에서 1400x900 해상도가 지원이 되며 전력관리가 우수하기 때문이다.
2010년에 처음으로 맥북 에어를 구입하고 OS X 를 사용하면서 리눅스가 너무너무 그리웠다.
예쁘고 멋진 인터페이스에 나름 안정적인 OS X 였지만
어느날 iTunes 를 업데이트한뒤 iTunes 의 버그로 시스템이 멈추는 현상이 생겼고
그 후로 Update 할때마다 시스템이 죽는게 아닐까 걱정이 되더라. :(</p>

<p>v10.6 > v10.7 > v10.8 > v10.9 까지 판올림을 해오면서 잘 써왔지만 이젠 리눅스로 돌아가기로 결심!</p>

<h3>준비</h3>

<p>Debian wheezy(7.2.0-amd64-netinst) iso 파일을 다운로드 받아서 USB drive 를 만든다.
또한 네트워크 <a href="http://ftp.kr.debian.org/debian/pool/non-free/f/firmware-nonfree/firmware-brcm80211_0.36+wheezy.1_all.deb">firmware (firmware-brcm80211)</a> 도 다운로드 받아서 다른 USB 에 저장한다.
여유가 있을때 macbook air 에 설치할 수 있는 netinst 로 패키징을 해야겠다.</p>

<p>만들어진 USB 를 꼽고 부팅을 한다. 부팅할때 Option 키를 누르고 있어야 설치디스크 선택 화면이 나온다.
EFI 장치를 선택하고 부팅하면 Debian Installer 화면이 보인다.</p>

<h3>설치</h3>

<p>설치는 installer 인터페이스로 디스크 파티셔닝까지 진행을 한뒤 콘솔로 수동 작업을 해줘야 한다.</p>

<p>파티션은 200MB를 EFI system partition 으로, 30GB를 시스템의 루트(/) 파티션으로, 2GB를 스왑으로 잡았다.
남은 디스크는 OS 설치후 추가 하기 위해 놔두었다.</p>

<p><strong>Base system</strong></p>

<p>파티션을 잡은 뒤 Base system 설치가 진행되다가 실패한다. 원인은 정확하게 모르겠다.;;
alt+F2 를 눌러서 콘솔로 접속을 한다. 이시점이면 /target 디렉토리가 존재할것이다. 없다면 mkdir!!</p>

<pre><code># debootstrap --arch amd64 wheezy /target http://ftp.neowiz.com/debian
...
# mount -o bind /proc /target/proc
# mount -o bind /sys /target/sys
# mount -o bind /dev /target/dev
# mount -o bind /dev/pts /target/dev/pts
# chroot /target /bin/bash
# mkdir /boot/efi
# mount /dev/sda1 /boot/efi
</code></pre>

<p><strong>패키지 설치</strong></p>

<pre><code># modprobe efivars
# apt-get install initramfs-tools linux-image-3.2.0-4-amd64 grub-efi-amd64 firmware-brcm80211 wireless-tools wpasupplicant
# update-initramfs -u
# grub-install /dev/sda
# update-grub
# umount /dev/sda1
# exit
# umount /target/dev/pts
# umount /target/dev
# umount /target/sys
# umount /target/proc
# reboot
</code></pre>

<h3>완료</h3>

<p>이제 부팅이 되면 바로 grub 화면이 보이고 Debian 으로 부팅할 수 있게 된다.</p>

<h3>남은것들</h3>

<p>이제 Macbook Air 가 가지고 있는 하드웨어의 기능을 사용하기 위해 이런저런 삽질이 남았다.</p>

<h3>참고</h3>

<p><a href="http://alexandre.delanoe.org/blog/archives/2012/10/index.html#e2012-10-05T09_04_38.txt">http://alexandre.delanoe.org/blog/archives/2012/10/index.html#e2012-10-05T09_04_38.txt</a><br/ >
<a href="http://dentifrice.poivron.org/laptops/macbookair3,1/">http://dentifrice.poivron.org/laptops/macbookair3,1/</a><br/ >
<a href="http://blog.felipe-alfaro.com/2006/09/19/installing-refit-on-the-hidden-efi-system-partition/">http://blog.felipe-alfaro.com/2006/09/19/installing-refit-on-the-hidden-efi-system-partition/</a><br/ >
<a href="https://wiki.debian.org/MacBookAir">https://wiki.debian.org/MacBookAir</a><br/ >
<a href="https://wiki.debian.org/InstallingDebianOn/Apple/MacBookAir/5-1">https://wiki.debian.org/InstallingDebianOn/Apple/MacBookAir/5-1</a><br/ ></p>
]]></content>
  </entry>
  
</feed>
