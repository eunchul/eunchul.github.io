<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Life with Linux]]></title>
  <link href="http://blog.foobargem.com/atom.xml" rel="self"/>
  <link href="http://blog.foobargem.com/"/>
  <updated>2016-06-11T16:45:06+09:00</updated>
  <id>http://blog.foobargem.com/</id>
  <author>
    <name><![CDATA[foobargem]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RPM Packaging]]></title>
    <link href="http://blog.foobargem.com/blog/2016/06/11/rpm-packaging/"/>
    <updated>2016-06-11T11:36:38+09:00</updated>
    <id>http://blog.foobargem.com/blog/2016/06/11/rpm-packaging</id>
    <content type="html"><![CDATA[<h3>발단</h3>

<p>VMware VM 중 1대의 Disk 공간이 부족해서 resize 를 하려고 했는데 parted-3.1 (CentOS 7) 에는 resize command 가 없어졌다.
구글링을 해보니 parted-3.2 에 resizepart 가 추가되었다고 한다.</p>

<ul>
<li><a href="http://savannah.gnu.org/forum/forum.php?forum_id=8042">http://savannah.gnu.org/forum/forum.php?forum_id=8042</a></li>
</ul>


<p>그래서 소스코드를 직접 빌드하고서 내친김에 rpm packaging 까지 하게 되었다.</p>

<h3>rpm 패키징</h3>

<h5>Build directory 생성</h5>

<pre><code>$ mkdir rpmbuild
$ cd rpmbuild
$ mkdir SOURCES SPECS BUILD RPMS SRPMS
</code></pre>

<table>
  <thead>
    <tr>
      <th>Directory</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>SOURCES</td>
      <td>original sources, patches, icon files 가 포함된 디렉토리</td>
    </tr>
    <tr>
      <td>SPECS</td>
      <td>rpm build 를 위한 spec files 가 있는 디렉토리</td>
    </tr>
    <tr>
      <td>BUILD</td>
      <td>source file 압축해제 및 build 되는 디렉토리</td>
    </tr>
    <tr>
      <td>BUILDROOT</td>
      <td>%install stage 에서 생성되는 files 가 저장되는 디렉토리</td>
    </tr>
    <tr>
      <td>RPMS</td>
      <td>binary package files (*.rpm) 이 만들어지는 디렉토리</td>
    </tr>
    <tr>
      <td>SRPMS</td>
      <td>source package files (*.src.rpm) 이 만들어지는 디렉토리</td>
    </tr>
  </tbody>
</table>


<h5>Spec file 작성</h5>

<pre><code>$ cd SPECS
$ vim parted-3.2.spec
</code></pre>

<p><strong>parted-3.2.spec</strong></p>

<p>gist: <a href="https://gist.github.com/foobargem/f260b896fe030a382b7b18f43633a8a4#file-parted-3-2-spec">https://gist.github.com/foobargem/f260b896fe030a382b7b18f43633a8a4#file-parted-3-2-spec</a></p>

<pre><code>%global _enable_debug_package 0
%global debug_package %{nil}
%define dist .el7.nhnent
%define _prefix /opt/parted

Name: parted
Version: 3.2
Release: 1%{?dist}
Summary: The GNU disk partition manipulation program

License: GPLv3+
URL: http://www.gnu.org/software/parted
Source0: parted-3.2.tar.xz

%description
The GNU Parted program allows you to create, destroy, resize, move,
and copy hard disk partitions. Parted can be used for creating space
for new operating systems, reorganizing disk usage, and copying data
to new hard disks.

%prep
%setup -q

%build
%configure
make %{?_smp_mflags}

%install
%make_install

%clean
rm -rf $RPM_BUILD_ROOT

%files
%{_prefix}
#%{_datadir}/*
#%{_includedir}/*
#%{_libdir}/*
#%{_sbindir}/*

%changelog
* Fri Jun 10 2016 makerpm
- build and packaging
</code></pre>

<h5>Build</h5>

<pre><code>$ cd SPECS
$ rpmbuild -bb parted-3.2.spec
</code></pre>

<p>오류 없으면 rpmbuilds/RPMS/x86_64/parted-3.2-1.el7.nhnent.x86_64.rpm 파일이 생성된다.</p>

<h3>설명</h3>

<pre><code>%global _enable_debug_package 0
%global debug_package %{nil}
</code></pre>

<p>debug package 를 생성하지 않음</p>

<pre><code>%define dist .el7.nhnent
%define _prefix /opt/parted
</code></pre>

<p>main stream package 와 구분하기 위해서 release name 에 nhnent 라는 접미사를 붙였고
package files 의 prefix 를 /opt/parted 로 지정했다.</p>

<h3>에피소드</h3>

<ul>
<li>prefix 와 %files</li>
</ul>


<p>prefix 를 /opt/parted 로 하고 %files 에 각 파일을 기술해줬더니
패키지 삭제시 empty directory 가 남아있는 이슈가 있었다.
그래서 %files 를 %{_prefix} 롤 지정했다.</p>

<p>만약 /usr 디렉토리에 sbin, share, lib 등으로 나누어 설치하게 하려면
%files 에 아래와 같이 기술해줘야 한다.</p>

<pre><code>%files
%{_datadir}/*
%{_includedir}/*
%{_libdir}/*
%{_sbindir}/*
</code></pre>

<h3>참고</h3>

<ul>
<li><a href="http://www.tldp.org/HOWTO/RPM-HOWTO/build.html">http://www.tldp.org/HOWTO/RPM-HOWTO/build.html</a></li>
<li><a href="https://fedoraproject.org/wiki/How_to_create_an_RPM_package">https://fedoraproject.org/wiki/How_to_create_an_RPM_package</a></li>
<li><a href="https://fedoraproject.org/wiki/Packaging:DistTag">https://fedoraproject.org/wiki/Packaging:DistTag</a></li>
<li><a href="https://fedoraproject.org/wiki/How_to_create_a_GNU_Hello_RPM_package">https://fedoraproject.org/wiki/How_to_create_a_GNU_Hello_RPM_package</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stunnel With Ulimit]]></title>
    <link href="http://blog.foobargem.com/blog/2016/04/13/stunnel-with-ulimit/"/>
    <updated>2016-04-13T21:01:22+09:00</updated>
    <id>http://blog.foobargem.com/blog/2016/04/13/stunnel-with-ulimit</id>
    <content type="html"><![CDATA[<h3>배경</h3>

<p>그림과 같이 L4 에 2대의 Swift proxy server 를 바인딩 한 환경에서
https 서비스를 제공하기 위해 L4 에서 SSL Offloading 설정을 했다.</p>

<p>
<img src="http://blog.foobargem.com/images/201604/swift_cluster_architecture.png">
</p>


<p><strong>이슈</strong></p>

<ul>
<li>L4의 SSL Offloading 성능이 떨어짐. 1Gbps 환경에서 download 시20MB/s</li>
</ul>


<p>속도 문제를 해결하기 위해서 swift proxy server 에서 SSL 처리를 시도해 보았다.
SSL termination 을 위해서 nginx 와 stunnel 을 시험해 보았다.</p>

<p><strong>시험방법</strong></p>

<ul>
<li>100 sessions 로 동시 다운로드 시도시 시스템 리소스 사용율 측정(Load avg.)</li>
<li>시험결과

<ul>
<li>nginx: 5 (1 min)</li>
<li>stunnel: 0.5 (1 min)</li>
</ul>
</li>
</ul>


<p>시스템 리소스를 적게 사용하는 stunnel 로 채택!!</p>

<h3>stunnel</h3>

<p><strong>설치</strong></p>

<pre><code># ./configure --prefix=/usr/local/stunnel --disable-libwrap --with-threads=pthread
# make
# make install
</code></pre>

<p><strong>stunnel.conf</strong></p>

<pre><code>setuid = www-data
setgid = www-data
pid = /var/run/stunnel/stunnel.pid
;chroot = /var/run/stunnel

; error
debug = 3
output = /var/log/stunnel/stunnel.log

; Protocol version (all, SSLv2, SSLv3, TLSv1)
sslVersion = all

fips = no

[swiftproxy]
accept = 0.0.0.0:443
connect = 127.0.0.1:80
TIMEOUTidle = 600
cert = swift-proxy.crt
key = swift-proxy.nopass.key
</code></pre>

<h3>process limits</h3>

<p>swift 사용량이 늘다보니 아래와 같은 log 가 확인되었다.</p>

<pre><code>2016.04.05 12:33:34 LOG3[13353638]: remote socket: Too many open files (24)
</code></pre>

<p>stunnel process 의 limits 확인</p>

<pre><code># cat /proc/$(cat /var/run/stunnel/stunnel.pid)/limits
Limit                     Soft Limit           Hard Limit           Units
Max cpu time              unlimited            unlimited            seconds
Max file size             unlimited            unlimited            bytes
Max data size             unlimited            unlimited            bytes
Max stack size            8388608              unlimited            bytes
Max core file size        0                    unlimited            bytes
Max resident set          unlimited            unlimited            bytes
Max processes             192299               192299               processes
Max open files            1024                 4096                 files
Max locked memory         65536                65536                bytes
Max address space         unlimited            unlimited            bytes
Max file locks            unlimited            unlimited            locks
Max pending signals       192299               192299               signals
Max msgqueue size         819200               819200               bytes
Max nice priority         0                    0
Max realtime priority     0                    0
Max realtime timeout      unlimited            unlimited            us
</code></pre>

<p>/etc/security/limits.conf 를 수정해도 프로세스를 기동할 때 적용이 되지 않는다.
적용하려면 init script or service file 을 수정해주면 된다.</p>

<h5>init</h5>

<p>/etc/init.d/stunnel</p>

<pre><code>...
DEFAULTPIDFILE=/var/run/stunnel/stunnel.pid
DAEMON=/usr/local/stunnel/bin/stunnel
NAME=stunnel
DESC="SSL tunnels"
OPTIONS=""
ENABLED=0
RLIMITS="-n 32000"
...
</code></pre>

<h5>systemd</h5>

<ul>
<li>systemd 에서는 service file 에서 process 의 resource limits 를 설정해줄 수 있다.</li>
<li>참고: <a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html">https://www.freedesktop.org/software/systemd/man/systemd.exec.html</a></li>
</ul>


<p>/etc/systemd/system/multi-user.target.wants/stunnel.service</p>

<pre><code>[Unit]
Description=SSL tunnel for network daemons
After=syslog.target

[Service]
LimitNOFILE=32000
ExecStart=/usr/local/stunnel/bin/stunnel /usr/local/stunnel/etc/stunnel/stunnel.conf
Type=forking

[Install]
WantedBy=multi-user.target
</code></pre>

<h3>적용후</h3>

<pre><code># cat /proc/$(cat /var/run/stunnel/stunnel.pid)/limits
...
Max open files            32000                32000                files
</code></pre>

<h3>에피소드</h3>

<ul>
<li>다른 동료가 /etc/security/limits.conf 를 수정후 stunnel restart 했으나 max open files 설정은 적용되지 않음.</li>
<li>stunnel 의 thread mode 가 pthread 일 때만 limits 설정이 적용됨 확인.</li>
<li>역시 manual 과 doc 을 잘 읽어봐야 함.</li>
<li>시스템 설정 적용후 실제 적용 여부는 꼭 확인해야 함. (그래서 내가 보긴 했지만..)</li>
</ul>


<h3>참고</h3>

<ul>
<li><a href="http://www.ghostar.org/2014/09/rebooting-linux-temporarily-loses-some-limits-conf-settings/">http://www.ghostar.org/2014/09/rebooting-linux-temporarily-loses-some-limits-conf-settings/</a></li>
<li><a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html">https://www.freedesktop.org/software/systemd/man/systemd.exec.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 에서 온습도 센서(DHT-11)로 온/습도 측정하기]]></title>
    <link href="http://blog.foobargem.com/blog/2016/03/27/how-to-read-dht-series-of-humidity-and-temperature-sensors-on-a-raspberry-pi/"/>
    <updated>2016-03-27T11:59:47+09:00</updated>
    <id>http://blog.foobargem.com/blog/2016/03/27/how-to-read-dht-series-of-humidity-and-temperature-sensors-on-a-raspberry-pi</id>
    <content type="html"><![CDATA[<h3>DHT11 온습도 센서</h3>

<ul>
<li><a href="http://eleparts.co.kr/EPXF43N9">http://eleparts.co.kr/EPXF43N9</a></li>
<li>manual: <a href="http://www.micropik.com/PDF/dht11.pdf">http://www.micropik.com/PDF/dht11.pdf</a></li>
<li>Python library:  <a href="https://github.com/adafruit/Adafruit_Python_DHT">https://github.com/adafruit/Adafruit_Python_DHT</a></li>
</ul>


<h3>시험환경</h3>

<ul>
<li>Raspberry PI B</li>
<li>GPIO layout: <img src="http://www.raspberrypi-spy.co.uk/wp-content/uploads/2012/09/Raspberry-Pi-GPIO-Layout-Revision-2.png" alt="GPIO Layout" /></li>
</ul>


<h3>시험</h3>

<p><strong>센서연결</strong></p>

<ul>
<li>pin #1 &ndash; 3V</li>
<li>pin #6 &ndash; Ground</li>
<li>pin #16 &ndash; GPIO23 (data)</li>
</ul>


<p><strong>설치</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo python setup.py install</span></code></pre></td></tr></table></div></figure>


<p><strong>예제코드 수정 및 실행</strong></p>

<p>예제코드: <a href="https://github.com/adafruit/Adafruit_Python_DHT/blob/master/examples/simpletest.py">https://github.com/adafruit/Adafruit_Python_DHT/blob/master/examples/simpletest.py</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Adafruit_DHT</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">sensor</span> <span class="o">=</span> <span class="n">Adafruit_DHT</span><span class="o">.</span><span class="n">DHT11</span>
</span><span class='line'>
</span><span class='line'><span class="c"># GPIO23 (pin no: #16)</span>
</span><span class='line'><span class="n">pin</span> <span class="o">=</span> <span class="mi">23</span>
</span><span class='line'>
</span><span class='line'><span class="n">humidity</span><span class="p">,</span> <span class="n">temperature</span> <span class="o">=</span> <span class="n">Adafruit_DHT</span><span class="o">.</span><span class="n">read_retry</span><span class="p">(</span><span class="n">sensor</span><span class="p">,</span> <span class="n">pin</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">humidity</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">temperature</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Temp={0:0.1f}*C Humidity={1:0.1f}%&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">temperature</span><span class="p">,</span> <span class="n">humidity</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Failed to get reading.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>실행결과</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">python</span> <span class="n">read</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">Temp</span><span class="o">=</span><span class="mf">24.0</span><span class="o">*</span><span class="n">C</span> <span class="n">Humidity</span><span class="o">=</span><span class="mf">21.0</span><span class="o">%</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ToDo</h3>

<ul>
<li>매일 아침 창문 밖의 온습도 측정하여 휴대폰으로 알람 발송.</li>
<li>매 시간 단위로 온습도 측정하여 influxdb 에 저장. (그 후로는 나중에 생각하자..)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LG 그램 랩탑에서 Linux Kernel 빌드하기]]></title>
    <link href="http://blog.foobargem.com/blog/2015/07/04/build-kernel-on-lg-gram-laptop/"/>
    <updated>2015-07-04T11:06:36+09:00</updated>
    <id>http://blog.foobargem.com/blog/2015/07/04/build-kernel-on-lg-gram-laptop</id>
    <content type="html"><![CDATA[<p>회사에서 지급받은 랩탑은 LG 그램이다.
OS는 LMDE(Linux Mint Debian Edition) 을 설치해서 잘 쓰고 있다.</p>

<p>처음에는 i915 driver 버그로 LED 밝기조절이 안되고
밝기조절 기능을 활성화 하는경우 시스템이 멎는 문제가 있었다.
삽질을 하던중 KLDP 에서 커널 업데이트하면 해결된다는 글(<a href="https://kldp.org/node/151205">https://kldp.org/node/151205</a>)을 읽었다.
그리고 바로 3.18.8 커널로 빌드를 했고 문제는 깔끔하게 해결되었다. :D</p>

<p>커널 업데이트 후 wireless device (Intel Wireless 7620) 가 인식이 안되었는데
원인은 firmware 버전이 안맞아서였다.
그래서 <a href="https://wireless.wiki.kernel.org/en/users/Drivers/iwlwifi">linux wireless driver website</a> 에서
커널버전에 맞는 firmware 를 다운로드 받아 설치를 했고 아주 잘 동작함을 확인했다.</p>

<p>이번주에 오랜만에 커널을 4.1.1 버전으로 업데이트하고 wireless device 가 동작을 안해서
이전의 firmware 설치한 기억을 잊어버리고 dmesg, log 를 추적해서 firmware 버전이 안맞는것이
원인이라는 것을 찾아서 다시 4.1 버전 이상에 맞는 firmware 를 설치했다.</p>

<p>나의 믿을수 없는 기억으로 또 삽질하는 것을 방지하고자 커널 빌드과정을 정리한다.</p>

<h3>prepare</h3>

<h5>Kernel source</h5>

<pre><code>https://www.kernel.org/
</code></pre>

<h5>Wireless device firmware</h5>

<p>설치하려는 커널 버전에 맞는 firmware 다운로드</p>

<pre><code># tar xvzf iwlwifi-7260-ucode-25.30.13.0.tgz
# cp iwlwifi-7260-13.ucode /lib/firmware
</code></pre>

<h3>kernel build</h3>

<h5>Configuration</h5>

<p>설정 하나하나를 살펴보고 활성/모듈/비활성을 선택해야 한다.
그러나 지금버전 커널의 config 파일를 기반으로 설정을 하면 좀 수월하다.
그래서 /boot/config-$(uname -r) 파일을 복사해온다.</p>

<pre><code># cd /usr/src
# tar xvf linux-4.1.1.tar.xz
...
# cd linux-4.1.1
# cp /boot/config-$(uname -r) /usr/src/linux-4.1.1/.config
# make menuconfig
// Load -&gt; .config 후 전체 설정을 확인
</code></pre>

<h5>Build</h5>

<p>빌드 수행시 -jN (N은 cpu core 개수의 1/2정도) 옵션으로 병렬로 할수 있다.
make install 이 수행되면 자동으로 update-grub 가 수행된다.</p>

<pre><code># make -j2
# make modules_install install
</code></pre>

<h5>Done</h5>

<pre><code># reboot
</code></pre>

<h3>참고</h3>

<ul>
<li><a href="https://www.kernel.org/">https://www.kernel.org/</a></li>
<li><a href="http://kernelnewbies.org/KernelBuild">http://kernelnewbies.org/KernelBuild</a></li>
<li><a href="https://wireless.wiki.kernel.org/en/users/Drivers/iwlwifi">https://wireless.wiki.kernel.org/en/users/Drivers/iwlwifi</a></li>
<li><a href="https://kldp.org/node/151205">https://kldp.org/node/151205</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[보자기카드 샘플 후기]]></title>
    <link href="http://blog.foobargem.com/blog/2015/01/24/i-like-bojagi-card/"/>
    <updated>2015-01-24T21:09:52+09:00</updated>
    <id>http://blog.foobargem.com/blog/2015/01/24/i-like-bojagi-card</id>
    <content type="html"><![CDATA[<h3>보자기카드엔 꿈과 사랑과 선물이 한 보자기</h3>

<p><img src="http://blog.foobargem.com/images/201501/bojagi_card_sample.jpg"></p>

<p>
4월 결혼을 준비하며무엇을 준비해야할지 모르고있을때<br>
옆반 선생님의 권유로 알게된 보자기카드^^<br>
자신도 보자기카드에서 주문했다며 반신반의로 회원가입하였는데..
</p>


<p>
막상 들어가보니 예쁜 카드가 한가득^^<br>
이것저것 남자친구와 고르던중 마음에 드는 카드를 골라 배송^^<br>
직장으로 도착하여 동료들과 어느 청첩장이 이쁘냐며 이야기도 듣고<br>
결국은 남자친구와 고른 예쁜 나비가 있는 카드 당첨!!
</p>


<p>
다른 곳에서도 같이 받아보았으나<br>
이곳만의 특별한 매력은<br>
바로 큰 봉투에 같이 온 보자기카드의 편지^^
</p>


<p>
그냥 카드를 사는곳이 아닌 결혼을 축하받는 기분이었답니다.
</p>


<p>
바로 보자키 카드에서 청접장을 받고 싶네요~~<br>
결혼을 앞둔 친구들에게 꼭 소개해주고싶네요^^
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multipath]]></title>
    <link href="http://blog.foobargem.com/blog/2014/08/27/multipath/"/>
    <updated>2014-08-27T11:11:11+09:00</updated>
    <id>http://blog.foobargem.com/blog/2014/08/27/multipath</id>
    <content type="html"><![CDATA[<p>컴퓨터 스토리지에서 multipath I/O 는 결함감내시스템(Fault tolerance) 과 성능(Performance) 향상을 위한 기술을 말한다.</p>

<p>버스(buses), 컨트롤러(controllers), 스위치(switches), 브리지 장치(bridge devices) 로 구성된 대량의 스토리지 장치(mass storage devices)와 컴퓨터 시스템의 CPU 사이에 한개 이상의 경로(path)를 두어서 구성을 한다.</p>

<p>예를 들면 하나의 SCSI 디스크가 연결된 두개의 SCSI 컨트롤러(controllers) 가 같은 컴퓨터에 장착되어 있거나 두개의 파이버 채널(Fiber Channel) 포트(port)가 연결되어 있는 것을 말한다.
만약 한개의 컨트롤러나 포트 또는 스위치가 장애가 발생하면 운영체제(OS)는 장애가 나지 않은 다른 컨트롤러를 통해서 반드시 I/O 작업이 이뤄져야 한다.</p>

<p>Multipath software layers 는 아래와 같은 성능 향상을 위한 기능을 제공한다.</p>

<ul>
<li>Dynamic load balancing</li>
<li>Traffic shaping</li>
<li>Automatic path management</li>
<li>Dynamic reconfiguration</li>
</ul>


<h3>설정</h3>

<p>Debian wheezy 에서multipath-tools_0.4.9+git0.4dfdaf2b-7~deb7u2_amd64.deb 패키지를 설치하여 구성하였다.</p>

<h4>WWN or WWID</h4>

<p>WWN(World Wide Name) 또는 WWID(World Wide Identifier) 라고 불리운다.
이것은 FC(Fiber Channel), SAS(Serial Attached SCSI), ATA(Advanced Technology Attachment) 의 스토리지 기술에서 고유한 식별자(unique identifier)로 사용된다.</p>

<p>참고: <a href="http://en.wikipedia.org/wiki/World_Wide_Name">http://en.wikipedia.org/wiki/World_Wide_Name</a></p>

<h5>FC 주소 확인</h5>

<p>HBA 가 장착된 리눅스 시스템에서 /sys/class/fc_host 디렉토리 이하를 살펴보면 확인할 수 있다.</p>

<pre><code># ls /sys/class/fc_host
host0
# cat /sys/class/fc_host/host0/port_name
0x2100001b32939df8
# cat /sys/class/fc_host/host0/node_name
0x2000001b32939df8
</code></pre>

<h5>WWN 확인</h5>

<p>리눅스 시스템에서는 /sys/class/fc_transport 디렉토리 이하를 살펴보면 확인할 수 있다.</p>

<pre><code># ls /sys/class/fc_transport
target0:0:0  target0:0:1
# cat /sys/class/fc_transport/target0\:0\:0/node_name 
0x2000001b4d01a9f2
# cat /sys/class/fc_transport/target0\:0\:0/port_name 
0x2100001b4d01a9f2
</code></pre>

<h5>multipath.conf</h5>

<p>Debian wheezy 에 4개의 FC path 가 할당 되었다.</p>

<pre><code>defaults {
    user_friendly_names yes 
    fast_io_fail_tmo 15  
}

blacklist {
    devnode "^sd[a-z][[0-9]*]"
    wwid 36b82a720d8d964001b5dbbc31d351fe1
}

multipaths {
    multipath {
        wwid 3600601601c203900cff81153e321e411
    }   
    multipath {
        wwid 3600601601c203900d0f81153e321e411
    }   
    multipath {
        wwid 3600601601c203900ee1d1460e321e411
    }   
    multipath {
        wwid 3600601601c203900ef1d1460e321e411
    }   
}
</code></pre>

<h4>설정 예</h4>

<h5>defaults</h5>

<p><img src="http://blog.foobargem.com/images/201408/multipath_default.png"></p>

<h5>path_grouping_policy: multibus</h5>

<p><img src="http://blog.foobargem.com/images/201408/multipath_multibus.png"></p>

<h5>hwhandler=0</h5>

<p><img src="http://blog.foobargem.com/images/201408/multipath_disable_hwhandler.png"></p>

<h5>features=0</h5>

<p><img src="http://blog.foobargem.com/images/201408/multipath_disable_features.png"></p>

<h3>failover</h3>

<p>Debian wheezy 에서 multipath 를 구성한뒤 failover 시험을 했다.
2개의 HBA에 연결된 port 를 하나 뽑았을 때 I/O 작업이 지속되는지를 체크 했는데
300초 동안 I/O 작업이 멈춰있었다.
실제로는 OCFS2 로 구성되어 있었는데 OCFS2 의 self-fencing 으로인해 재부팅이 되었다.</p>

<p>이를 해결하기 위해서 Debian 시스템을 확인하던 중
dev_loss_tmo 의 기본값이 300초, fast_io_fail_tmo 의 기본값이 off 임을 발견하였다.</p>

<p>그래서 fast_io_fail_tmo 를 15초로 설정해주니 15초의 I/O 지연이 발생하지만 failover 가 정상적으로 수행됨을 확인했다.</p>

<h3>문제점</h3>

<p>multipath.conf 의 man page 에 따라 defaults 섹션에 기술한 설정값이 적용이 안됨을 발견했다.
features=0 을 설정하기 위해서는 multipath 섹션을 따로 기술해주고 no_path_retry fail 을 추가해주면 된다.</p>

<p>이는 좀더 확인이 필요하다.</p>

<h3>참고</h3>

<ul>
<li><a href="https://access.redhat.com/documentation/ko-KR/Red_Hat_Enterprise_Linux/6/html/DM_Multipath/">https://access.redhat.com/documentation/ko-KR/Red_Hat_Enterprise_Linux/6/html/DM_Multipath/</a></li>
<li><a href="http://www.sourceware.org/lvm2/wiki/MultipathUsageGuide">http://www.sourceware.org/lvm2/wiki/MultipathUsageGuide</a></li>
<li><a href="http://docs.oracle.com/cd/E19253-01/820-1931/">http://docs.oracle.com/cd/E19253-01/820-1931/</a></li>
<li><a href="http://www.brentozar.com/archive/2009/05/san-multipathing-part-1-what-are-paths/">http://www.brentozar.com/archive/2009/05/san-multipathing-part-1-what-are-paths/</a></li>
<li><a href="http://www.brentozar.com/archive/2009/05/san-multipathing-part-2-what-multipathing-does/">http://www.brentozar.com/archive/2009/05/san-multipathing-part-2-what-multipathing-does/</a></li>
<li><a href="https://www.sit.auckland.ac.nz/Configuring_SAN_access_with_Linux_multipath">https://www.sit.auckland.ac.nz/Configuring_SAN_access_with_Linux_multipath</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[한글2007 설치하기 - 여자친구를 위한]]></title>
    <link href="http://blog.foobargem.com/blog/2014/07/14/installing-hangul-application/"/>
    <updated>2014-07-14T21:31:05+09:00</updated>
    <id>http://blog.foobargem.com/blog/2014/07/14/installing-hangul-application</id>
    <content type="html"><![CDATA[<h3>머리말</h3>

<p>나의 사랑하는 여자친구는 유치원 교사이다.
이 글은 그녀가 가지고 있는 넷북에 한글2010을 설치하는 방법을 알려주기 위해 작성했다.
안타깝게도 내가 가지고 있는것은 한글2007뿐이다.
한글2010과 한글2007 두 버전의 차이는 센스쟁이 여자친구가 거뜬히 극복할 것을 믿기에
한글2007을 기준으로 글을 작성한다.</p>

<h3>설치과정</h3>

<h5>1. iso 파일의 압축 해제</h5>

<p>
한글2007 iso 파일을 7Zip 으로 압축을 해제한다.
</p>


<p>
<img src="http://blog.foobargem.com/images/201407/step_001.png"><br/ >
</p>


<p>
<img src="http://blog.foobargem.com/images/201407/step_002.png">
</p>


<h5>2. install.exe 파일 실행</h5>

<p>압축이 풀려진 폴더로 가서 install.exe 파일을 실행(더블클릭)한다.</p>




<p>
<img src="http://blog.foobargem.com/images/201407/step_003.png">
&#8220;게시자를 알 수 없는 다음 프로그램이 이 컴퓨터를 변경할 수 있도록 허용하시겠습니까?&#8221; 라는 질문에 &#8220;예&#8221;라고 선택을 한다
.</p>


<h5>3. 한글2007 설치 단계 진행</h5>

<p>
<img src="http://blog.foobargem.com/images/201407/step_004.png">
&#8220;한글과컴퓨터 한글2007 설치&#8221;를 클릭!!
</p>




<p>
<img src="http://blog.foobargem.com/images/201407/step_005.png">
&#8220;다음&#8221;을 클릭!!
</p>




<p>
<img src="http://blog.foobargem.com/images/201407/step_006.png">
사용권 계약서는 읽을수록 혼동되니 읽지말고 &#8220;동의함&#8221;을 선택후 &#8220;다음&#8221; 클릭!!
</p>




<p>
<img src="http://blog.foobargem.com/images/201407/step_007.png">
&#8220;사용자 이름&#8221;, &#8220;단체&#8221;, &#8220;제품번호&#8221;를 입력 후 &#8220;다음&#8221; 클릭!!
</p>




<p>
<img src="http://blog.foobargem.com/images/201407/step_008.png">
&#8220;권장설치&#8221;를 선택후 &#8220;다음&#8221; 클릭!!
</p>




<p>
<img src="http://blog.foobargem.com/images/201407/step_009.png">
&#8220;설치 폴더 선택&#8221;도 기본값(C:\HNC)을 변경하지 않고 &#8220;다음&#8221; 클릭!! 
</p>




<p>
<img src="http://blog.foobargem.com/images/201407/step_010.png">
&#8220;설치&#8221;버튼을 클릭하여 설치 진행!!
</p>




<p>
<img src="http://blog.foobargem.com/images/201407/step_012.png">
</p>


<p>
<img src="http://blog.foobargem.com/images/201407/step_013.png">
</p>


<h5>4. 자동 업데이트 설정</h5>

<p>
<img src="http://blog.foobargem.com/images/201407/step_014.png">
자동업데이트는 사용해도 좋지만 실제 업데이트 하는 경우는 적기 때문에 체크해제 후 &#8220;닫기&#8221;버튼 클릭!!
</p>


<h5>5. 한글2007 실행</h5>

<p>
<img src="http://blog.foobargem.com/images/201407/step_015.png">
시작 -> 프로그램 -> &#8220;한글과컴퓨터 한글2008&#8221;
</p>




<p>
<img src="http://blog.foobargem.com/images/201407/step_016.png">
</p>


<h3>맺음</h3>

<p>소프트웨어 설치는 쉬워보이지만 생소한 용어들이 어렵게 느껴지게 하는것 같다.
누구나 쓰기 쉬운 소프트웨어를 만드는 일은 그만큼 고려해야 할 게 많은것 같다.</p>

<p>여자친구가 한글(한컴오피스) 프로그램을 설치하는데 도움이 되길 바라며..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macbook Air 에 Debian(wheezy) 설치하기]]></title>
    <link href="http://blog.foobargem.com/blog/2013/12/14/installing-debian-on-macbook-air/"/>
    <updated>2013-12-14T23:09:46+09:00</updated>
    <id>http://blog.foobargem.com/blog/2013/12/14/installing-debian-on-macbook-air</id>
    <content type="html"><![CDATA[<h3>Macbook Air</h3>

<p>난 맥북 에어를 좋아한다.
가볍고, 13인치 화면에서 1400x900 해상도가 지원이 되며 전력관리가 우수하기 때문이다.
2010년에 처음으로 맥북 에어를 구입하고 OS X 를 사용하면서 리눅스가 너무너무 그리웠다.
예쁘고 멋진 인터페이스에 나름 안정적인 OS X 였지만
어느날 iTunes 를 업데이트한뒤 iTunes 의 버그로 시스템이 멈추는 현상이 생겼고
그 후로 Update 할때마다 시스템이 죽는게 아닐까 걱정이 되더라. :(</p>

<p>v10.6 > v10.7 > v10.8 > v10.9 까지 판올림을 해오면서 잘 써왔지만 이젠 리눅스로 돌아가기로 결심!</p>

<h3>준비</h3>

<p>Debian wheezy(7.2.0-amd64-netinst) iso 파일을 다운로드 받아서 USB drive 를 만든다.
또한 네트워크 <a href="http://ftp.kr.debian.org/debian/pool/non-free/f/firmware-nonfree/firmware-brcm80211_0.36+wheezy.1_all.deb">firmware (firmware-brcm80211)</a> 도 다운로드 받아서 다른 USB 에 저장한다.
여유가 있을때 macbook air 에 설치할 수 있는 netinst 로 패키징을 해야겠다.</p>

<p>만들어진 USB 를 꼽고 부팅을 한다. 부팅할때 Option 키를 누르고 있어야 설치디스크 선택 화면이 나온다.
EFI 장치를 선택하고 부팅하면 Debian Installer 화면이 보인다.</p>

<h3>설치</h3>

<p>설치는 installer 인터페이스로 디스크 파티셔닝까지 진행을 한뒤 콘솔로 수동 작업을 해줘야 한다.</p>

<p>파티션은 200MB를 EFI system partition 으로, 30GB를 시스템의 루트(/) 파티션으로, 2GB를 스왑으로 잡았다.
남은 디스크는 OS 설치후 추가 하기 위해 놔두었다.</p>

<p><strong>Base system</strong></p>

<p>파티션을 잡은 뒤 Base system 설치가 진행되다가 실패한다. 원인은 정확하게 모르겠다.;;
alt+F2 를 눌러서 콘솔로 접속을 한다. 이시점이면 /target 디렉토리가 존재할것이다. 없다면 mkdir!!</p>

<pre><code># debootstrap --arch amd64 wheezy /target http://ftp.neowiz.com/debian
...
# mount -o bind /proc /target/proc
# mount -o bind /sys /target/sys
# mount -o bind /dev /target/dev
# mount -o bind /dev/pts /target/dev/pts
# chroot /target /bin/bash
# mkdir /boot/efi
# mount /dev/sda1 /boot/efi
</code></pre>

<p><strong>패키지 설치</strong></p>

<pre><code># modprobe efivars
# apt-get install initramfs-tools linux-image-3.2.0-4-amd64 grub-efi-amd64 firmware-brcm80211 wireless-tools wpasupplicant
# update-initramfs -u
# grub-install /dev/sda
# update-grub
# umount /dev/sda1
# exit
# umount /target/dev/pts
# umount /target/dev
# umount /target/sys
# umount /target/proc
# reboot
</code></pre>

<h3>완료</h3>

<p>이제 부팅이 되면 바로 grub 화면이 보이고 Debian 으로 부팅할 수 있게 된다.</p>

<h3>남은것들</h3>

<p>이제 Macbook Air 가 가지고 있는 하드웨어의 기능을 사용하기 위해 이런저런 삽질이 남았다.</p>

<h3>참고</h3>

<p><a href="http://alexandre.delanoe.org/blog/archives/2012/10/index.html#e2012-10-05T09_04_38.txt">http://alexandre.delanoe.org/blog/archives/2012/10/index.html#e2012-10-05T09_04_38.txt</a><br/ >
<a href="http://dentifrice.poivron.org/laptops/macbookair3,1/">http://dentifrice.poivron.org/laptops/macbookair3,1/</a><br/ >
<a href="http://blog.felipe-alfaro.com/2006/09/19/installing-refit-on-the-hidden-efi-system-partition/">http://blog.felipe-alfaro.com/2006/09/19/installing-refit-on-the-hidden-efi-system-partition/</a><br/ >
<a href="https://wiki.debian.org/MacBookAir">https://wiki.debian.org/MacBookAir</a><br/ >
<a href="https://wiki.debian.org/InstallingDebianOn/Apple/MacBookAir/5-1">https://wiki.debian.org/InstallingDebianOn/Apple/MacBookAir/5-1</a><br/ ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Rbenv on OS X]]></title>
    <link href="http://blog.foobargem.com/blog/2013/12/01/installing-rbenv/"/>
    <updated>2013-12-01T22:12:48+09:00</updated>
    <id>http://blog.foobargem.com/blog/2013/12/01/installing-rbenv</id>
    <content type="html"><![CDATA[<p>늘 하는 얘기지만 Linux 에서는 이런 고민은 안해도 된다.
OS X Mavericks 에서는 ruby-2.0.0p247 이 시스템에 설치되어 있다.
그래도 최신버전의 ruby와 GEM 을 편리하게 관리하려면 rbenv 만한 것도 없는것 같다.</p>

<p><a href="https://github.com/sstephenson/rbenv">Rbenv 프로젝트 페이지</a>의 가이드를 따라 설치를 하면
irb 나 rails console 에서 한글을 입력하지 못하게 될것이고
openssl 관련한 이슈가 생길것이다. (이전의 경험이라 지금은 확인을 안해봤다.)</p>

<p>이를 위해서 openssl 과 readline 을 ruby 를 빌드할때 참조시켜줘야 한다.
brew 의 설치는 <a href="http://brew.sh/">Homebrew 프로젝트 페이지</a>를 참조하면 된다.</p>

<h3>openssl 설치</h3>

<pre><code>brew install openssl
</code></pre>

<h3>readline 설치</h3>

<pre><code>brew install readline
</code></pre>

<h3>rbenv 설치</h3>

<pre><code>$ cd  # move to home dir.
$ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
$ echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
$ source .bash_profile
$ type rbenv
#=&gt; "rbenv is a function"
</code></pre>

<p>자세한 내용은 <a href="https://github.com/sstephenson/rbenv">Rbenv 프로젝트 페이지</a>를 참조.</p>

<h3>ruby-build 설치</h3>

<p>rbenv 의 plugin 으로 설치하는 것을 권장.</p>

<pre><code>$ git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre>

<p>자세한 내용은 <a href="https://github.com/sstephenson/ruby-build">ruby-build 프로젝트 페이지</a>를 참조.</p>

<h3>ruby 설치</h3>

<pre><code>$ rbenv install --list   # 설치가능한 버전확인
$ CONFIGURE_OPTS="--with-readline-dir=$(brew --prefix readline) --with-openssl-dir=$(brew --prefix openssl)" rbenv install 2.0.0-p353
$ rbenv global 2.0.0-p353
$ rbenv rehash
$ ruby --version
</code></pre>

<p>이것으로 완료!!
즐거운 루비 곡갱이질을.. :)</p>
]]></content>
  </entry>
  
</feed>
